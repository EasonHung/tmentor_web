{"ast":null,"code":"import { getClassroomId, getClassroomList } from \"../../../api_handler/classroom_api_handler\";\nimport { infoToast, successToast } from \"../../../service/toast_service\";\nexport async function fetchClassroomList(setIsLoading, setClassroomList) {\n  let classroomList;\n  try {\n    classroomList = await getClassroomList();\n  } catch (e) {\n    alert(e);\n  }\n  setClassroomList(classroomList);\n  setIsLoading(false);\n  return classroomList;\n}\nexport async function classroomOpen(originClassroomList, setClassroomList, message, setIsInClassroom) {\n  const userClassroomId = await getClassroomId();\n  if (message.classroomId === userClassroomId) {\n    successToast(\"open classroom success\");\n    setIsInClassroom(true);\n    return;\n  }\n  const newList = originClassroomList.map(classroom => {\n    if (classroom.classroomId === message.classroomId) {\n      const classSetting = JSON.parse(message.message);\n      return {\n        ...classroom,\n        classTime: classSetting.classTime,\n        status: 'online'\n      };\n    }\n    return classroom;\n  });\n  setClassroomList(newList);\n}\nexport async function classroomClose(originClassroomList, setClassroomList, classroomId, setIsInClassroom) {\n  const userClassroomId = await getClassroomId();\n  if (classroomId === userClassroomId) {\n    infoToast(\"close classroom success\");\n    setIsInClassroom(false);\n    return;\n  }\n  const newList = originClassroomList.map(classroom => {\n    if (classroom.classroomId === classroomId) {\n      return {\n        ...classroom,\n        classTime: 0,\n        status: 'offline'\n      };\n    }\n    return classroom;\n  });\n  setClassroomList(newList);\n}","map":{"version":3,"names":["getClassroomId","getClassroomList","infoToast","successToast","fetchClassroomList","setIsLoading","setClassroomList","classroomList","e","alert","classroomOpen","originClassroomList","message","setIsInClassroom","userClassroomId","classroomId","newList","map","classroom","classSetting","JSON","parse","classTime","status","classroomClose"],"sources":["/Users/hongyixun/Desktop/tmentor/tmentor_web/src/pages/classroom/service/classroom_list_service.js"],"sourcesContent":["import { getClassroomId, getClassroomList } from \"../../../api_handler/classroom_api_handler\";\nimport { infoToast, successToast } from \"../../../service/toast_service\";\n\nexport async function fetchClassroomList(setIsLoading, setClassroomList) {\n    let classroomList\n\n    try {\n        classroomList = await getClassroomList()\n    } catch(e) {\n        alert(e)\n    }\n\n    setClassroomList(classroomList)\n    setIsLoading(false)\n    return classroomList\n}\n\nexport async function classroomOpen(originClassroomList, setClassroomList, message, setIsInClassroom) {\n    const userClassroomId = await getClassroomId()\n\n    if(message.classroomId === userClassroomId) {\n        successToast(\"open classroom success\")\n        setIsInClassroom(true)\n        return\n    }\n\n    const newList = originClassroomList.map((classroom) => {\n        if(classroom.classroomId === message.classroomId) {\n            const classSetting = JSON.parse(message.message)\n            return {...classroom, classTime: classSetting.classTime, status: 'online'}\n        }\n        return classroom\n    })\n    setClassroomList(newList)\n}\n\nexport async function classroomClose(originClassroomList, setClassroomList, classroomId, setIsInClassroom) {\n    const userClassroomId = await getClassroomId()\n\n    if(classroomId === userClassroomId) {\n        infoToast(\"close classroom success\")\n        setIsInClassroom(false)\n        return\n    }\n\n    const newList = originClassroomList.map((classroom) => {\n        if(classroom.classroomId === classroomId) {\n            return {...classroom, classTime: 0, status: 'offline'}\n        }\n        return classroom\n    })\n    setClassroomList(newList)\n}"],"mappings":"AAAA,SAASA,cAAc,EAAEC,gBAAgB,QAAQ,4CAA4C;AAC7F,SAASC,SAAS,EAAEC,YAAY,QAAQ,gCAAgC;AAExE,OAAO,eAAeC,kBAAkBA,CAACC,YAAY,EAAEC,gBAAgB,EAAE;EACrE,IAAIC,aAAa;EAEjB,IAAI;IACAA,aAAa,GAAG,MAAMN,gBAAgB,EAAE;EAC5C,CAAC,CAAC,OAAMO,CAAC,EAAE;IACPC,KAAK,CAACD,CAAC,CAAC;EACZ;EAEAF,gBAAgB,CAACC,aAAa,CAAC;EAC/BF,YAAY,CAAC,KAAK,CAAC;EACnB,OAAOE,aAAa;AACxB;AAEA,OAAO,eAAeG,aAAaA,CAACC,mBAAmB,EAAEL,gBAAgB,EAAEM,OAAO,EAAEC,gBAAgB,EAAE;EAClG,MAAMC,eAAe,GAAG,MAAMd,cAAc,EAAE;EAE9C,IAAGY,OAAO,CAACG,WAAW,KAAKD,eAAe,EAAE;IACxCX,YAAY,CAAC,wBAAwB,CAAC;IACtCU,gBAAgB,CAAC,IAAI,CAAC;IACtB;EACJ;EAEA,MAAMG,OAAO,GAAGL,mBAAmB,CAACM,GAAG,CAAEC,SAAS,IAAK;IACnD,IAAGA,SAAS,CAACH,WAAW,KAAKH,OAAO,CAACG,WAAW,EAAE;MAC9C,MAAMI,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACT,OAAO,CAACA,OAAO,CAAC;MAChD,OAAO;QAAC,GAAGM,SAAS;QAAEI,SAAS,EAAEH,YAAY,CAACG,SAAS;QAAEC,MAAM,EAAE;MAAQ,CAAC;IAC9E;IACA,OAAOL,SAAS;EACpB,CAAC,CAAC;EACFZ,gBAAgB,CAACU,OAAO,CAAC;AAC7B;AAEA,OAAO,eAAeQ,cAAcA,CAACb,mBAAmB,EAAEL,gBAAgB,EAAES,WAAW,EAAEF,gBAAgB,EAAE;EACvG,MAAMC,eAAe,GAAG,MAAMd,cAAc,EAAE;EAE9C,IAAGe,WAAW,KAAKD,eAAe,EAAE;IAChCZ,SAAS,CAAC,yBAAyB,CAAC;IACpCW,gBAAgB,CAAC,KAAK,CAAC;IACvB;EACJ;EAEA,MAAMG,OAAO,GAAGL,mBAAmB,CAACM,GAAG,CAAEC,SAAS,IAAK;IACnD,IAAGA,SAAS,CAACH,WAAW,KAAKA,WAAW,EAAE;MACtC,OAAO;QAAC,GAAGG,SAAS;QAAEI,SAAS,EAAE,CAAC;QAAEC,MAAM,EAAE;MAAS,CAAC;IAC1D;IACA,OAAOL,SAAS;EACpB,CAAC,CAAC;EACFZ,gBAAgB,CAACU,OAAO,CAAC;AAC7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}