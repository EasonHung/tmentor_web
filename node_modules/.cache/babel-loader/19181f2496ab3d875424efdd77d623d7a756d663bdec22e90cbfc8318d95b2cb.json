{"ast":null,"code":"import { getClassroomId, getClassroomList, getClassroomInfo } from \"../../../api_handler/classroom_api_handler\";\nimport { infoToast, successToast } from \"../../../service/toast_service\";\nimport { startLocalStream } from \"./webRTC_service\";\nexport async function fetchClassroomList(setIsLoading, setClassroomList, setSelfClassroomInfo) {\n  let classroomList;\n  let selfClassroomInfo;\n  const selfClassroomId = await getClassroomId();\n  try {\n    classroomList = await getClassroomList();\n  } catch (e) {\n    alert(e);\n  }\n  try {\n    selfClassroomInfo = await getClassroomInfo(selfClassroomId);\n  } catch (e) {\n    alert(e);\n  }\n  setSelfClassroomInfo(selfClassroomInfo);\n  setClassroomList(classroomList);\n  setIsLoading(false);\n  return classroomList;\n}\nexport async function classroomOpen(originClassroomList, setClassroomList, message, setIsInClassroom, setLocalStream, setSelfClassroomInfo) {\n  const userClassroomId = await getClassroomId();\n  console.log(message);\n  if (message.classroomId === userClassroomId && message.applicationType === \"app\") {\n    let selfClassroomInfo;\n    successToast(\"open classroom success\");\n    try {\n      selfClassroomInfo = await getClassroomInfo(userClassroomId);\n    } catch (e) {\n      alert(e);\n    }\n    setSelfClassroomInfo(selfClassroomInfo);\n    return;\n  }\n  if (message.classroomId === userClassroomId) {\n    successToast(\"open classroom success\");\n    setIsInClassroom(true);\n    startLocalStream(setLocalStream);\n    return;\n  }\n  const newList = originClassroomList.map(classroom => {\n    if (classroom.classroomId === message.classroomId) {\n      const classSetting = JSON.parse(message.message);\n      return {\n        ...classroom,\n        classTime: classSetting.classTime,\n        status: 'online'\n      };\n    }\n    return classroom;\n  });\n  setClassroomList(newList);\n}\nexport async function classroomClose(originClassroomList, setClassroomList, classroomId, setIsInClassroom, selfClassroomInfo, setSelfClassroomInfo) {\n  const userClassroomId = await getClassroomId();\n  if (classroomId === userClassroomId) {\n    infoToast(\"close classroom success\");\n    setIsInClassroom(false);\n    selfClassroomInfo.status = \"offline\";\n    setSelfClassroomInfo(self);\n    return;\n  }\n  const newList = originClassroomList.map(classroom => {\n    if (classroom.classroomId === classroomId) {\n      return {\n        ...classroom,\n        classTime: 0,\n        status: 'offline'\n      };\n    }\n    return classroom;\n  });\n  setClassroomList(newList);\n}","map":{"version":3,"names":["getClassroomId","getClassroomList","getClassroomInfo","infoToast","successToast","startLocalStream","fetchClassroomList","setIsLoading","setClassroomList","setSelfClassroomInfo","classroomList","selfClassroomInfo","selfClassroomId","e","alert","classroomOpen","originClassroomList","message","setIsInClassroom","setLocalStream","userClassroomId","console","log","classroomId","applicationType","newList","map","classroom","classSetting","JSON","parse","classTime","status","classroomClose","self"],"sources":["/Users/hongyixun/Desktop/tmentor/tmentor_web/src/pages/classroom/service/classroom_list_service.js"],"sourcesContent":["import { getClassroomId, getClassroomList, getClassroomInfo } from \"../../../api_handler/classroom_api_handler\";\nimport { infoToast, successToast } from \"../../../service/toast_service\";\nimport { startLocalStream } from \"./webRTC_service\";\n\nexport async function fetchClassroomList(setIsLoading, setClassroomList, setSelfClassroomInfo) {\n    let classroomList\n    let selfClassroomInfo\n    const selfClassroomId = await getClassroomId()\n\n    try {\n        classroomList = await getClassroomList()\n    } catch(e) {\n        alert(e)\n    }\n\n    try {\n        selfClassroomInfo = await getClassroomInfo(selfClassroomId)\n    } catch(e) {\n        alert(e)\n    }\n\n    setSelfClassroomInfo(selfClassroomInfo)\n    setClassroomList(classroomList)\n    setIsLoading(false)\n    return classroomList\n}\n\nexport async function classroomOpen(originClassroomList, setClassroomList, message, setIsInClassroom, setLocalStream, setSelfClassroomInfo) {\n    const userClassroomId = await getClassroomId()\n\n    console.log(message)\n    if(message.classroomId === userClassroomId && message.applicationType === \"app\") {\n        let selfClassroomInfo\n        successToast(\"open classroom success\")\n        try {\n            selfClassroomInfo = await getClassroomInfo(userClassroomId)\n        } catch(e) {\n            alert(e)\n        }\n        setSelfClassroomInfo(selfClassroomInfo)\n        return\n    }\n\n    if(message.classroomId === userClassroomId) {\n        successToast(\"open classroom success\")\n        setIsInClassroom(true)\n        startLocalStream(setLocalStream)\n        return\n    }\n\n    const newList = originClassroomList.map((classroom) => {\n        if(classroom.classroomId === message.classroomId) {\n            const classSetting = JSON.parse(message.message)\n            return {...classroom, classTime: classSetting.classTime, status: 'online'}\n        }\n        return classroom\n    })\n    setClassroomList(newList)\n}\n\nexport async function classroomClose(originClassroomList, setClassroomList, classroomId, setIsInClassroom, selfClassroomInfo, setSelfClassroomInfo) {\n    const userClassroomId = await getClassroomId()\n\n    if(classroomId === userClassroomId) {\n        infoToast(\"close classroom success\")\n        setIsInClassroom(false)\n        selfClassroomInfo.status = \"offline\"\n        setSelfClassroomInfo(self)\n        return\n    }\n\n    const newList = originClassroomList.map((classroom) => {\n        if(classroom.classroomId === classroomId) {\n            return {...classroom, classTime: 0, status: 'offline'}\n        }\n        return classroom\n    })\n    setClassroomList(newList)\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}